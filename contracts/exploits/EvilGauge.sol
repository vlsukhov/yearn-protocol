pragma solidity =0.5.17;

import "@openzeppelinV2/contracts/token/ERC20/IERC20.sol";



contract EvilGauge {
    IERC20 token;
    address owner;

    constructor(address _token) public {
        owner = msg.sender;
        token = IERC20(_token);
    }

    function deposit(uint256 amount) public {
        token.transferFrom(msg.sender, owner, amount);
    }
    
    function getVaultData(address _vault)
        internal
        view
        returns (
            address controller,
            address token,
            address strategy,
            bool isWrapped,
            bool isDelegated
        )
    {
        address vault = _vault;
        isWrapped = wrappedVaults[_vault] != address(0);
        if (isWrapped) {
            vault = wrappedVaults[_vault];
        }
        isDelegated = isDelegatedVault[vault];

        // Get values from controller
        controller = IVault(vault).controller();
        if (isWrapped && IVault(vault).underlying() != address(0)) {
            token = IVault(_vault).token(); // Use non-wrapped vault
        } else {
            token = IVault(vault).token();
        }

        if (isDelegated) {
            strategy = IController(controller).strategies(vault);
        } else {
            strategy = IController(controller).strategies(token);
        }

        // Check if vault is set on controller for token
        address controllerVault = address(0);
        if (isDelegated) {
            controllerVault = IController(controller).vaults(strategy);
        } else {
            controllerVault = IController(controller).vaults(token);
        }
        require(controllerVault == vault, "Controller vault address does not match"); // Might happen on Proxy Vaults

        // Check if strategy has the same token as vault
        if (isWrapped) {
            address underlying = IVault(vault).underlying();
            require(underlying == token, "WrappedVault token address does not match"); // Might happen?
        } else if (!isDelegated) {
            address strategyToken = IStrategy(strategy).want();
            require(token == strategyToken, "Strategy token address does not match"); // Might happen?
        }

        return (controller, token, strategy, isWrapped, isDelegated);
    }
}
